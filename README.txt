Il progetto seguente è un'implementazione di un'applicazione client/server TCP che permette il Download e Upload di dati.
[SERVER] Il lato server all'avvio indicizza tutti i file presenti nel file system a partire da un Path inserito come parametro. Esso genererà quindi una lista utile a reperire i file richiesti dal client. L'operazione di Indicizzazione è realizzata con l'ausilio di N thread(tanti quanti sono i core della CPU) che scansionano i file delle varie Directory e Sottodirectory, aggiornando la lista in Mutua Esclusione.
Al termine di questa operazione, il Server si pone in attesa di Connessioni da parte degli utenti. Per poter accedere ai servizi, il Client dovrà prima Registrarsi(una sola volta) e poi effettuare il Login(ad ogni nuovo accesso). Il server tiene nota di Nome Utente e Password in un file di testo generato al primo avvio del Server stesso.
[CLIENT] Il lato Client si connette fornendo l'hostname del Server come parametro. Esso è dotato di Menu testuale che consente di inviare richieste al server. Le possibili richieste sono: REGISTER <NOME UTENTE>, LOGIN, SEND <FILE>, RECEIVE <FILE>, CLOSE.

[Esempio SEND] il Client deve inserire il tipo di file richiesto (.jpeg, .txt, ...). Il Server invierà quindi una lista di risultati con tutti i file di quel tipo che possiede. Il Client conferma il file esatto (pippo.jpeg) e il Server procede all'invio.
[Esempio RECEIVE] il Client inserisce il nome del file che vuole inviare (prova.txt), poi inserisce il percorso del file (se si trova nella stessa directory del processo, riscrivere il nome del file). Il server salva il file inviato e aggiorna la propria lista di file.

[DIFFICOLTÀ RISCONTRATE E METODI RISOLUTIVI ADOTTATI] Per il trasferimento di file, ho adottato il metodo dell' invio ciclico di buffer della lunghezza massima di 1024 byte. Ho riscontrato dei problemi nella fase di read/write (read() che rimanevano bloccate nonostante l'altro lato avesse già finito di inviare, read() che leggevano i dati anche di precedenti write()), a cui ho ovviato rallentando il processo scrivente con delle sleep(), e l'invio di una stringa speciale che segnala la fine del file da inviare. Anche durante l'invio della lista dei risultati, si riscontravano dei refusi di precedenti liste di risultati inviate, a cui ho ovviato con il riconoscimento della stringa di domanda che chiude la lista.
Per la ricerca dei file in lista, ho implementato un confronto tra la stringa inviata dal client (di N caratteri) e le stringhe in lista a partire dagl ultimi N caratteri, così da permettere all'utente di inserire solamente i nomi dei file senza dover specificare l'intero pathname.

[OTTIMIZZAZIONI FUTURE] Si potrebbe implementare un sistema più articolato di gestione degli utenti, come la creazione di una lista personale e riservata dei file Uploadati, inaccessibile agli altri utenti connessi; la possibilità di cancellarsi dal servizio, con la conseguente eliminazione della lista personale; possibilità di cambiare i dati di registrazione o recuperarli.  
